@model FabulousDB.Models.Installment_setting

@{
    ViewBag.Title = "Create Installment setting";

    Layout = "~/Views/Shared/_Layout.cshtml";
}


@using (Ajax.BeginForm(new AjaxOptions {OnSuccess="InstallmentSettingCreated" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Plan_id, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Plan_id, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Plan_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Type, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Inactive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Inactive)
                    @Html.ValidationMessageFor(model => model.Inactive, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cash_advanced_percentage, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Cash_advanced_percentage, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cash_advanced_percentage, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Number_of_installment, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Number_of_installment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Number_of_installment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Installment_period, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Installment_period, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Installment_period, "", new { @class = "text-danger" })
            </div>
        </div> 
        <div class="form-group">
            @Html.LabelFor(model => model.Increase_by, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">@{ 
                int W1 = 30;
            }
                @foreach (var value in Business.GetEnumValues<FabulousDB.Models.Increase_by>())
                {
                    @Html.RadioButtonFor(m => m.Increase_by, value, new { @class = "v-middle", data_value = (int)value })
                    @Html.Label(value.ToString().Replace("_", " "), new { @class = "height100 v-middle Margin0", style = $"width: {W1}%;" })
                    <span style="margin-left:20px;"></span>
                    W1 = 35;
                }
                @Html.ValidationMessageFor(model => model.Increase_by, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Increase, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Increase, new { htmlAttributes = new { @class = "form-control maskmoney" } })
                @Html.ValidationMessageFor(model => model.Increase, "", new { @class = "text-danger" })
            </div>
        </div>  
        <br />
        <div class="form-group">
            @Html.LabelFor(model => model.Penelty_by, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{
                    W1 = 30;

                }
                @foreach (var value in Business.GetEnumValues<FabulousDB.Models.Increase_by>())
                {

                    @Html.RadioButtonFor(m => m.Penelty_by, value, new { @class = "v-middle ", data_value = (int)value })
                    @Html.Label(value.ToString().Replace("_", " "), new { @class = "height100 v-middle Margin0", style =$"width: {W1}%;" })
                    <span style="margin-left:20px;"></span>
                    W1 = 35;
                }
                @Html.ValidationMessageFor(model => model.Penelty_by, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Penelty_days, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Penelty_days, new { htmlAttributes = new { @class = "form-control",type="number" } })
                @Html.ValidationMessageFor(model => model.Penelty_days, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Penelty, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Penelty, new { htmlAttributes = new { @class = "form-control maskmoney" } })
                @Html.ValidationMessageFor(model => model.Penelty, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group hide">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" id="MainForm" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<section class="d-inline-block">
    @Ajax.ActionLink("Add Custom Installment","Create", "Custom_installment",new { }, new AjaxOptions {UpdateTargetId= "AddCustomInstallment",InsertionMode=InsertionMode.InsertAfter ,OnSuccess= "ReTranslate" }
, new { @class = "btn btn-primary" })
</section>
<section id="AddCustomInstallment">
    <h4>Custom installment</h4>
    @try
    {
        @Html.Action("Edit", "Custom_installment", new { id = Model.Id })
    }
    catch{
    }
</section>
<div class="form-group ">
    <div class="col-md-offset-2 col-md-10">
        <button id="Create" class="btn btn-success">Create</button>
    </div>
</div>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script>
    $("#Create").click(function () {
        $("#MainForm").trigger("click");
    });
    function InstallmentSettingCreated(Id) {
        $("#AddCustomInstallment").find(".Installment_setting_id").val(Id);
        $("#AddCustomInstallment").find(".SubmitCustomSetting").trigger("click");
        RedirectInt("/Installment/Installment_setting");
    }
    $(function () {
        MaskMoneyTxt();
    })
    $("input[name='Increase_by']").on("click", function () {
        $("#Increase").trigger("focusout")
        if ($(this).val() == "Percentage") {
            DestroyMaskInput("Increase")
            //MaskInputNoCurr($("#Increase"),"%")
        } else {
            MaskMoneyTxt();
            Valid($("#Increase"))
        }
    })
    $("#Increase").on("focusout", function () {
        if (GetMaskNumber($(this).val()) > 100) {
            NotValid($(this), "@Business.Translate("Cant be More Than 100%")",false,true);
        }
    })
    $("input[name='Penelty_by']").on("click", function () {
        $("#Penelty").trigger("focusout")
        if ($(this).val() == "Percentage") {
            DestroyMaskInput("Penelty")
            //MaskInputNoCurr($("#Increase"),"%")
        } else {
            MaskMoneyTxt();
            Valid($("#Penelty"))
        }
    })
    $("#Penelty").on("focusout", function () {
        if (GetMaskNumber($(this).val()) > 100) {
            NotValid($(this), "@Business.Translate("Cant be More Than 100%")",false,true);
        }
    })
</script>