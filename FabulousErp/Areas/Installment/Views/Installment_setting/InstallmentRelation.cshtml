@model FabulousDB.Models.Installment_setting
<style>
    .col-md-5, .col-md-6, .col-md-7, .col-md-4 {
        display: inline-block;
    }

    tr, table {
        background: none !important;
    }
</style>
<table style="background:none;width:100%;" id="APTbl">
    @if (Model.Cash_advanced_percentage > 0)
    {
        <tr class="Sec">
            <td>
                <label class="Ref">@FabulousErp.BusController.Translate("Cash Advance Value")</label>
            </td>
            <td>
                <input data-order="1" class="Amount maskmoney form-control text-box single-line AdvAmount" id="CashAdvance" value="@ViewBag.CashAdvanceAmount" />
            </td>
            <td>
                <label>@FabulousErp.BusController.Translate("Percentage")</label>
            </td>
            <td>
                @Html.EditorFor(model => model.Cash_advanced_percentage, new { htmlAttributes = new { @class = "form-control Percent AdvPercent", @data_order = "1" } })
            </td>

            @if (Model.Type == FabulousDB.Models.Installment_types.Cheque)
            {
                <td class="Cheque">
                    <label>@FabulousErp.BusController.Translate("Cheque Number")</label>
                </td>
                <td>
                    <input class="ChequNumber form-control text-box single-line" />
                </td>
            }
            <td>
                <input type="date" class="form-control Cdate FirstPay" />
            </td>
            <td>
                <span> Historical </span>
                <input type="checkbox" class=" Historical" />

            </td>

        </tr>
    }
    @{
        int PropOrder = 2;
    }
    @foreach (FabulousDB.Models.Custom_installment i in Model.Custom_installment)
    {
        <tr class="Sec">
            <td>
                <label class="Ref"> @FabulousErp.BusController.Translate(i.Custom_no)</label>
            </td>
            <td>
                <input data-order="@PropOrder" class="form-control text-box single-line CustInstalAmount Amount maskmoney" value="@((ViewBag.OrginalAmount * i.Percetage) / 100)" />
            </td>
            <td>
                <label>@FabulousErp.BusController.Translate("Percentage")</label>
            </td>
            <td>
                <input class="form-control form-control text-box single-line Percent CustomPercent" data-order="@PropOrder" value="@i.Percetage" />
            </td>
            @if (Model.Type == FabulousDB.Models.Installment_types.Cheque)
            {
                <td class="Cheque">
                    <label>@FabulousErp.BusController.Translate("Cheque Number")</label>
                </td>
                <td>
                    <input class="ChequNumber form-control text-box single-line" />
                </td>

            }
            <td>
                <input type="date" class="form-control Cdate" />
            </td>
            <td>
                <span> Historical </span>
                <input type="checkbox" class="Historical" />
            </td>
            @{
                PropOrder++;
            }
        </tr>
    }
    @{
        DateTime ChequeDate = ViewBag.TDate;
        decimal InsAmountSteps = 0;
        float AllAmount = ViewBag.InstallmentOrginalAmount + Model.Cash_advanced_percentage + Model.Custom_installment.Sum(x => x.Percetage);
        double Percentage = ViewBag.InstallMentPercentage;
    }
    @for (int i = 1; i <= Model.Number_of_installment; i++)
    {
        if (Model.Installment_period == FabulousDB.Models.Installment_period.Monthly)
        {
            ChequeDate = ChequeDate.AddMonths(1);
        }
        else if (Model.Installment_period == FabulousDB.Models.Installment_period.Yearly)
        {
            ChequeDate = ChequeDate.AddYears(1);
        }
        else if (Model.Installment_period == FabulousDB.Models.Installment_period.Quarter)
        {
            ChequeDate = ChequeDate.AddMonths(3);
        }
<tr class="Sec">
    @{
        // double Percentage =  ((100 - Model.Cash_advanced_percentage - Model.Custom_installment.Sum(x => x.Percetage)) / Model.Number_of_installment);
        // string Amount = ((ViewBag.InstallmentOrginalAmount * Percentage) / 100).ToString(FabulousErp.Business.GetDecimalNumber());
        InsAmountSteps += (decimal)Math.Round(ViewBag.InstallmentOrginalAmount / Model.Number_of_installment, Business.GetDecimalPointNumber());
        float AmountF = (float)Math.Round((ViewBag.InstallmentOrginalAmount / Model.Number_of_installment), Business.GetDecimalPointNumber());
        string Amount = (AmountF).ToString(FabulousErp.Business.GetDecimalNumber());
        //Percentage = 100 - (ViewBag.InstallMentPercentage * Model.Number_of_installment);
        float ThisPercntage = (float)Math.Round((AmountF / ViewBag.InstallmentOrginalAmount) * 100, FabulousErp.Business.GetDecimalPointNumber());
        if (i == 1)
        {
            float ThisNewAmount = (float)Math.Round((ViewBag.InstallmentOrginalAmount / Model.Number_of_installment), Business.GetDecimalPointNumber())
                        * Model.Number_of_installment;
            if (ThisNewAmount > ViewBag.InstallmentOrginalAmount)
            {
                float NewAmount = (float)Math.Round(ThisNewAmount - ViewBag.InstallmentOrginalAmount, Business.GetDecimalPointNumber());
                float AmountSF = (float)Math.Round((ViewBag.InstallmentOrginalAmount / Model.Number_of_installment) - NewAmount, Business.GetDecimalPointNumber());
                Amount = (AmountSF).ToString();
                ThisPercntage = (float)Math.Round((AmountSF / ViewBag.InstallmentOrginalAmount) * 100, FabulousErp.Business.GetDecimalPointNumber());
            }
            else if (Math.Round((ViewBag.InstallmentOrginalAmount / Model.Number_of_installment)
                        * Model.Number_of_installment, Business.GetDecimalPointNumber()) < ViewBag.InstallmentOrginalAmount)
            {
                float NewAmount = (float)Math.Round(ThisNewAmount - ViewBag.InstallmentOrginalAmount, Business.GetDecimalPointNumber());
                float AmountSF = (float)Math.Round((ViewBag.InstallmentOrginalAmount / Model.Number_of_installment) + NewAmount, Business.GetDecimalPointNumber());
                Amount = (AmountSF).ToString();
                ThisPercntage = (float)Math.Round((AmountSF / ViewBag.InstallmentOrginalAmount) * 100, FabulousErp.Business.GetDecimalPointNumber());
            }
        }
        string PercentageStr = ThisPercntage.ToString(FabulousErp.Business.GetDecimalNumber());
    }
    <td>
        <label class="Ref">@FabulousErp.BusController.Translate("Installment No.") @i</label>
    </td>
    <td>
        <input class="InstallmentAmount form-control text-box single-line Amount maskmoney" data-order="@PropOrder" value="@Amount" />
    </td>
    <td>
        <label>@FabulousErp.BusController.Translate("Percentage")</label>
    </td>
    <td>
        <input class="InstallmentPercntage form-control text-box single-line Percent" data-order="@PropOrder" value="@PercentageStr" />
    </td>
    @if (Model.Type == FabulousDB.Models.Installment_types.Cheque)
    {
        <td class="Cheque">
            <label>@FabulousErp.BusController.Translate("Cheque Number")</label>
        </td>
        <td>
            <input type="number" class="ChequNumber form-control text-box single-line" />
        </td>
    }
    <td>
        @if (Model.Installment_period == FabulousDB.Models.Installment_period.Custom)
        {
            <input type="date" id="InstallDate_@i" name="InstallDate_@i" class="form-control Cdate" />
        }
        else
        {
            <input type="date" value="@ChequeDate.ToString("yyyy-MM-dd")" id="InstallDate_@i" name="InstallDate_@i" class="form-control Cdate" />
        }
    </td>
    <td>
        <span> Historical </span>
        <input type="checkbox" class=" Historical" />
    </td>
</tr>
        PropOrder++;
    }
</table>
<script>

    function GetCustomInstallPercent(){
        var SumPer = 0;
        $(".CustomPercent").each(function(){
          SumPer+= RoundNumber($(this).val());
        })
        return SumPer;
    }
    function GetCustomInstallAmount() {
        var SumPer = 0;
        $(".CustInstalAmount").each(function () {
            SumPer += parseFloat($(this).val());
        })
        return SumPer;
    }
    function GetInstallPercent(AfterOrder){
        var SumPer=0;
         $(".InstallmentPercntage").each(function(){
            SumPer+=RoundNumber($(this).val());
         })
        return SumPer;
    }

    function ClearAllAfter(ThisOrder, IsPercent = true) {
        if (IsPercent) {
            $(".Percent").each(function () {
                if (parseInt($(this).attr("data-order")) > parseInt(ThisOrder)) {
                    $(this).val(0)
                }
            })
        } else {
            $(".Amount").each(function () {
                if (parseInt($(this).attr("data-order")) > parseInt(ThisOrder)) {
                    $(this).val(0)
                }
            })
        }

    }
    function GetCountAfterThis(ThisOrder){
       var LastOrder= $("#APTbl").find(".InstallmentPercntage").last().attr("data-order");
       if (LastOrder==ThisOrder){
          return 1;
        }else{
         return LastOrder-ThisOrder;
        }
    }
    function SetAmount(){
        var ThisAmount = parseFloat($("#Amount").val());
          $(".Percent").each(function(){
                var ThisOrder=parseFloat($(this).attr("data-order"));
                var MyVal=$(this).val();
                $(".Amount[data-order="+ThisOrder+"]")
                .val(RoundNumber(ThisAmount*(MyVal/100)));
          })
    }
    $(function () {
        $("#InstallmentAmount").text((@(ViewBag.InstallmentOrginalAmount.ToString(FabulousErp.Business.GetDecimalNumber()))))
    })
</script>